{"test1": "CREATE TABLE test1 (a character(4)); INSERT INTO test1 VALUES ('ok'); SELECT a, char_length(a) FROM test1; CREATE TABLE test2 (b varchar(5)); INSERT INTO test2 VALUES ('ok'); INSERT INTO test2 VALUES ('good '); ERROR: value too large for column \"public\".\"test2\".\"b\" (actual:10, maximum:5) INSERT INTO test2 VALUES ('too long'); ERROR: value too large for column \"public\".\"test2\".\"b\" (actual:8, maximum:5) INSERT INTO test2 VALUES ('too long'::varchar(5)); SELECT b, char_length(b) FROM test2;", "heptree": "CREATE ACCESS METHOD heptree TYPE INDEX HANDLER heptree_handler;", "null": "CREATE CAST (bigint AS int4) WITH FUNCTION int4(bigint) AS ASSIGNMENT;", "french": "CREATE COLLATION french (locale = 'fr_FR.utf8');", "german_phonebook": "CREATE COLLATION german_phonebook (provider = icu, locale = 'de-u-co-phonebk');", "german": "CREATE COLLATION german FROM \"de_DE\";", "context_test": "CREATE CONTEXT context_test USING package_test;", "myconv": "CREATE CONVERSION myconv FOR 'UTF8' TO 'LATIN1' FROM myfunc;", "lusiadas": "CREATE DATABASE lusiadas;", "sales": "CREATE DATABASE sales OWNER salesapp TABLESPACE salesspace;", "objtype": "CREATE OR REPLACE TYPE objtype FORCE AUTHID CURRENT_USER AS OBJECT( f1 int, f2 varchar2(10), MEMBER FUNCTION memfunc(i int) RETURN INT, STATIC PROCEDURE staproc, CONSTRUCTOR FUNCTION objtype(self in out objtype) RETURN SELF AS RESULT ); \\set SQLTERM / CREATE OR REPLACE TYPE BODY objtype AS MEMBER FUNCTION memfunc(i int) RETURN INT AS BEGIN RAISE NOTICE 'self.f1 is %', self.f1; RAISE NOTICE 'self.f2 is %', f2; RETURN i; END; STATIC PROCEDURE staproc AS BEGIN RAISE NOTICE 'this is a static procedure in object type'; END; CONSTRUCTOR FUNCTION objtype(self in out objtype) RETURN SELF AS RESULT AS BEGIN f1 := 1; self.f2 := 'a'; RETURN ; END; END; / \\set SQLTERM ;", "music": "CREATE DATABASE music LC_COLLATE 'sv_SE.utf8' LC_CTYPE 'sv_SE.utf8' TEMPLATE template0;", "music2": "CREATE DATABASE music2 LC_COLLATE 'sv_SE.iso885915' LC_CTYPE 'sv_SE.iso885915' ENCODING LATIN9 TEMPLATE template0;", "LINK": "CREATE PUBLIC DATABASE LINK mylink CONNECT TO 'SYSTEM' IDENTIFIED BY 'password' USING 'ORADB';", "us_postal_code": "CREATE DOMAIN us_postal_code AS TEXT CHECK( VALUE ~ '^\\d{5}$' OR VALUE ~ '^\\d{5}-\\d{4}$' ); CREATE TABLE us_snail_addy ( address_id SERIAL PRIMARY KEY, street1 TEXT NOT NULL, street2 TEXT, street3 TEXT, city TEXT NOT NULL, postal us_postal_code NOT NULL );", "abort_any_command": "CREATE OR REPLACE FUNCTION abort_any_command() RETURNS event_trigger LANGUAGE plsql AS $$ BEGIN RAISE EXCEPTION 'command % is disabled', tg_tag; END; $$; CREATE EVENT TRIGGER abort_ddl ON ddl_command_start EXECUTE FUNCTION abort_any_command();", "tab2": "CREATE TABLE tab2 OF objtype; INSERT INTO tab2 VALUES (1, 'test'); SELECT * FROM tab2; SELECT t.memfunc(1) FROM tab2 t;", "hstore": "CREATE EXTENSION hstore;", "dummy": "CREATE FOREIGN DATA WRAPPER dummy;", "file_fdw": "CREATE EXTENSION file_fdw; CREATE FOREIGN DATA WRAPPER file HANDLER file_fdw_handler;", "mywrapper": "CREATE FOREIGN DATA WRAPPER mywrapper OPTIONS (debug 'true');", "films": "CREATE FOREIGN TABLE films ( code char(5) NOT NULL, title varchar(40) NOT NULL, did integer NOT NULL, date_prod date, kind varchar(10), len interval hour to minute ) SERVER film_server; \u00e6\u009c\u0089\u00e5 \u00b3\u00e5\u00ae\u009a\u00e4\u00b9\u0089\u00e4\u00b8\u0080\u00e4\u00b8\u00aa\u00e6\u009c\u008d\u00e5\u008a\u00a1\u00e5\u0099\u00a8\u00e7\u009a\u0084\u00e7\u00bb\u0086\u00e8\u008a\u0082\u00e5\u008f\u00af\u00e4\u00bb\u00a5\u00e5\u008f\u0082\u00e8\u0080\u0083 :ref:`CREATE SERVER` \u00e3\u0080\u0082", "measurement_y2016m07": "CREATE FOREIGN TABLE measurement_y2016m07 PARTITION OF measurement FOR VALUES FROM ('2016-07-01') TO ('2016-08-01') SERVER server_07;", "add": "CREATE FUNCTION add(integer, integer) RETURNS integer AS 'select $1 + $2;' LANGUAGE SQL IMMUTABLE RETURNS NULL ON NULL INPUT; call add(1,1);", "dup": "CREATE FUNCTION dup(in int, out f1 int, out f2 text) AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$ LANGUAGE SQL; SELECT * FROM dup(42);", "dup_result": "CREATE TYPE dup_result AS (f1 int, f2 text); CREATE FUNCTION dup(int) RETURNS dup_result AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$ LANGUAGE SQL; SELECT * FROM dup(42);", "student": "CREATE TABLE student(SID INTEGER, SNAME CHAR(30)); INSERT INTO student VALUES(1, 'Tom'); INSERT INTO student VALUES(2, 'Jack'); \\set SQLTERM / CREATE OR REPLACE FUNCTION return_type RETURNS REFCURSOR AS DECLARE CURSOR c1 FOR SELECT * FROM student; BEGIN OPEN c1; RETURN c1; END; / \\set SQLTERM ; call return_type();", "sal_emp": "CREATE TABLE sal_emp ( name text, pay_by_quarter integer[], schedule text[][] );", "title_idx": "CREATE UNIQUE INDEX title_idx ON films (title);", "ON": "CREATE INDEX ON films ((lower(title)));", "title_idx_german": "CREATE INDEX title_idx_german ON films (title COLLATE \"de_DE\");", "title_idx_nulls_low": "CREATE INDEX title_idx_nulls_low ON films (title NULLS FIRST);", "gin_idx": "CREATE INDEX gin_idx ON documents_table USING GIN (locations) WITH (fastupdate = off);", "code_idx": "CREATE INDEX code_idx ON films (code) TABLESPACE indexspace;", "pointloc": "CREATE INDEX pointloc ON points USING gist (box(location,location)); SELECT * FROM points WHERE box(location,location) && '(0,0),(1,1)'::box;", "CONCURRENTLY": "CREATE INDEX CONCURRENTLY sales_quantity_index ON sales_table (quantity);", "tictactoe": "CREATE TABLE tictactoe ( squares integer[3][3] );", "index_name": "CREATE INDEX index_name ON table_name (column_name) UNUSABLE;", "plperl": "CREATE LANGUAGE plperl;", "plsample_call_handler": "CREATE FUNCTION plsample_call_handler() RETURNS language_handler AS '$libdir/plsample' LANGUAGE C; CREATE LANGUAGE plsample HANDLER plsample_call_handler;", "mymatview": "CREATE MATERIALIZED VIEW mymatview AS SELECT * FROM mytab;", "gist__int_ops": "CREATE OPERATOR CLASS gist__int_ops DEFAULT FOR TYPE _int4 USING gist AS OPERATOR 3 &&, OPERATOR 6 = (anyarray, anyarray), OPERATOR 7 @>, OPERATOR 8 <@, OPERATOR 20 @@ (_int4, query_int), FUNCTION 1 g_int_consistent (internal, _int4, smallint, oid, internal), FUNCTION 2 g_int_union (internal, internal), FUNCTION 3 g_int_compress (internal), FUNCTION 4 g_int_decompress (internal), FUNCTION 5 g_int_penalty (internal, internal, internal), FUNCTION 6 g_int_picksplit (internal, internal), FUNCTION 7 g_int_same (_int4, _int4, internal);", "my_op_family": "CREATE OPERATOR FAMILY my_op_family USING btree;", "user_policy": "CREATE POLICY user_policy ON users USING (user_name = current_user);", "mypublication": "CREATE PUBLICATION mypublication FOR TABLE users, departments;", "alltables": "CREATE PUBLICATION alltables FOR ALL TABLES;", "insert_only": "CREATE PUBLICATION insert_only FOR TABLE mydata WITH (publish = 'insert');", "group_name": "CREATE RESOURCE GROUP group_name WITH (resource_name = value);", "jonathan": "CREATE ROLE jonathan LOGIN;", "davide": "CREATE USER davide WITH PASSWORD 'jw8s0F4';", "miriam": "CREATE ROLE miriam WITH LOGIN PASSWORD 'jw8s0F4' VALID UNTIL '2005-01-01';", "admin": "CREATE ROLE admin WITH CREATEDB CREATEROLE;", "notify_me": "CREATE RULE notify_me AS ON UPDATE TO mytable DO ALSO NOTIFY mytable; UPDATE mytable SET name = 'foo' WHERE id = 42;", "myschema": "CREATE SCHEMA myschema;", "AUTHORIZATION": "CREATE SCHEMA AUTHORIZATION joe;", "test": "CREATE SCHEMA IF NOT EXISTS test AUTHORIZATION joe;", "hollywood": "CREATE SCHEMA hollywood CREATE TABLE films (title text, release date, awards text[]) CREATE VIEW winners AS SELECT title, release FROM films WHERE awards IS NOT NULL;", "serial": "CREATE SEQUENCE serial START 101;", "myserver": "CREATE SERVER myserver FOREIGN DATA WRAPPER kingbase_fdw OPTIONS (host 'foo', dbname 'foodb', port '54321');", "t1": "CREATE TABLE t1 ( a int, b int ); INSERT INTO t1 SELECT i/100, i/500 FROM generate_series(1,1000000) s(i); ANALYZE t1; SELECT * FROM t1 WHERE (a = 1) AND (b = 0); CREATE STATISTICS s1 (dependencies) ON a, b FROM t1; ANALYZE t1; SELECT * FROM t1 WHERE (a = 1) AND (b = 0);", "t2": "CREATE TABLE t2 ( a int, b int ); INSERT INTO t2 SELECT mod(i,100), mod(i,100) FROM generate_series(1,1000000) s(i); CREATE STATISTICS s2 (mcv) ON a, b FROM t2; ANALYZE t2; SELECT * FROM t2 WHERE (a = 1) AND (b = 1); SELECT * FROM t2 WHERE (a = 1) AND (b = 2);", "mysub": "CREATE SUBSCRIPTION mysub CONNECTION 'host=192.168.1.50 port=54321 user=foo dbname=foodb' PUBLICATION mypublication, insert_only;", "schm": "CREATE SCHEMA schm; CREATE SYNONYM schm.syn_tab FOR public.tab; SELECT * FROM schm.syn_tab; ERROR: relation \"SCHM.SYN_TAB\" does not exist LINE 1: SELECT * FROM schm.syn_tab; SELECT * FROM SYS_SYNONYM WHERE synname = 'SYN_TAB'; SELECT status FROM ALL_OBJECTS WHERE object_name = 'SYN_TAB';", "public": "CREATE TABLE public.tb(id int); INSERT INTO TB VALUES(1); CREATE SYNONYM schm.syn_tb FOR public.tb; SELECT * FROM SYS_SYNONYM WHERE synname = 'SYN_TB'; SELECT status FROM ALL_OBJECTS WHERE object_name = 'SYN_TB'; SELECT * FROM schm.syn_tb; DROP TABLE public.tb; SELECT status FROM ALL_OBJECTS WHERE object_name = 'SYN_TB'; SELECT * FROM schm.syn_tb; ERROR: relation \"SCHM.SYN_TB\" does not exist LINE 1: SELECT * FROM schm.syn_tb;", "syn_tabl": "CREATE PUBLIC SYNONYM syn_tabl FOR tabl; CREATE SYNONYM schm.syn_tabl FOR tabl; SELECT syn.synname, sp.nspname FROM SYS_SYNONYM syn, SYS_NAMESPACE sp WHERE syn.synnamespace = sp.oid;", "array_int": "CREATE TABLE array_int ( vector int[][] );", "distributors": "CREATE TABLE distributors ( did integer CHECK (did > 100), name varchar(40) );", "circles": "CREATE TABLE circles ( c circle, EXCLUDE USING gist (c WITH &&) );", "cinemas": "CREATE TABLE cinemas ( id serial, name text, location text ) TABLESPACE diskvol1;", "employee_type": "CREATE TYPE employee_type AS (name text, salary numeric); CREATE TABLE employees OF employee_type ( PRIMARY KEY (name), salary WITH OPTIONS DEFAULT 1000 );", "measurement": "CREATE TABLE measurement ( logdate date not null, peaktemp int, unitsales int ) PARTITION BY RANGE (logdate);", "measurement_year_month": "CREATE TABLE measurement_year_month ( logdate date not null, peaktemp int, unitsales int ) PARTITION BY RANGE (EXTRACT(YEAR FROM logdate), EXTRACT(MONTH FROM logdate));", "cities": "CREATE TABLE cities ( city_id bigserial not null, name text not null, population bigint ) PARTITION BY LIST (left(lower(name), 1));", "orders": "CREATE TABLE orders ( order_id bigint not null, cust_id bigint not null, status text ) PARTITION BY HASH (order_id);", "measurement_ym_older": "CREATE TABLE measurement_ym_older PARTITION OF measurement_year_month FOR VALUES FROM (MINVALUE, MINVALUE) TO (2016, 11); CREATE TABLE measurement_ym_y2016m11 PARTITION OF measurement_year_month FOR VALUES FROM (2016, 11) TO (2016, 12); CREATE TABLE measurement_ym_y2016m12 PARTITION OF measurement_year_month FOR VALUES FROM (2016, 12) TO (2017, 01); CREATE TABLE measurement_ym_y2017m01 PARTITION OF measurement_year_month FOR VALUES FROM (2017, 01) TO (2017, 02);", "cities_ab": "CREATE TABLE cities_ab PARTITION OF cities ( CONSTRAINT city_id_nonzero CHECK (city_id != 0) ) FOR VALUES IN ('a', 'b');", "orders_p1": "CREATE TABLE orders_p1 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 0); CREATE TABLE orders_p2 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 1); CREATE TABLE orders_p3 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 2); CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 3);", "cities_partdef": "CREATE TABLE cities_partdef PARTITION OF cities DEFAULT;", "customers": "CREATE TABLE customers ( customer_id NUMBER(6), name VARCHAR2(20), regdate date, email VARCHAR2(30), territory VARCHAR2(20), userlevel NUMBER(2) ) PARTITION BY LIST(userlevel) SUBPARTITION BY LIST(territory) ( PARTITION level1 VALUES (1, 2, 3) ( SUBPARTITION eastasia1 VALUES ('CHINA', 'JAPAN'), SUBPARTITION southeastasia1 VALUES ('THAILAND'), SUBPARTITION southasia1 VALUES ('INDIA'), SUBPARTITION centralasia1 VALUES ('KAZAKHSTAN'), SUBPARTITION westasia1 VALUES ('IRAN'), SUBPARTITION rest1 VALUES (DEFAULT) ), PARTITION level2 VALUES (4, 5, 6) ( SUBPARTITION eastasia2 VALUES ('CHINA', 'JAPAN'), SUBPARTITION southeastasia2 VALUES ('THAILAND'), SUBPARTITION southasia2 VALUES ('INDIA'), SUBPARTITION centralasia2 VALUES ('KAZAKHSTAN'), SUBPARTITION westasia2 VALUES ('IRAN'), SUBPARTITION rest2 VALUES (DEFAULT) ) ); CREATE TABLE customers ( customer_id NUMBER(6), name VARCHAR2(20), regdate date, email VARCHAR2(30), territory VARCHAR2(20), userlevel NUMBER(2) ) PARTITION BY LIST(userlevel) SUBPARTITION BY LIST(territory) SUBPARTITION TEMPLATE ( SUBPARTITION eastasia VALUES ('CHINA', 'JAPAN'), SUBPARTITION southeastasia VALUES ('THAILAND'), SUBPARTITION southasia VALUES ('INDIA'), SUBPARTITION centralasia VALUES ('KAZAKHSTAN'), SUBPARTITION rest VALUES (DEFAULT) ) ( PARTITION level1 VALUES (1, 2, 3), PARTITION level2 VALUES (4, 5, 6) );", "films_recent": "CREATE TABLE films_recent AS SELECT * FROM films WHERE date_prod >= '2002-01-01';", "films2": "CREATE TABLE films2 AS TABLE films;", "students": "CREATE TABLE students(id int, name text); INSERT INTO students VALUES (1,'haha'); INSERT INTO students VALUES (100,'today'); INSERT INTO students VALUES (500,'street'); INSERT INTO students VALUES (5000,'hary'); INSERT INTO students VALUES (50000,'marry'); CREATE TABLE p_students (a, b) PARTITION BY RANGE (a) ( PARTITION pt1 VALUES LESS THAN (100), PARTITION pt2 VALUES LESS THAN (1000), PARTITION pt3 VALUES LESS THAN (maxvalue) ) AS SELECT * FROM STUDENTS; SELECT 'p1' \u00e5\u0088\u0086\u00e5\u008c\u00ba\u00e5\u0090\u008d, t.* from p_students PARTITION (pt1) t; SELECT 'p2' \u00e5\u0088\u0086\u00e5\u008c\u00ba\u00e5\u0090\u008d, t.* FROM p_students PARTITION (pt2) t; SELECT 'p3' \u00e5\u0088\u0086\u00e5\u008c\u00ba\u00e5\u0090\u008d, t.* FROM p_students PARTITION (pt3) t;", "dbspace": "CREATE TABLESPACE dbspace LOCATION '/data/dbs';", "indexspace": "CREATE TABLESPACE indexspace OWNER genevieve LOCATION '/data/indexes';", "encrypt_tsp": "CREATE TABLESPACE encrypt_tsp OWNER genevieve LOCATION '/data/encrypt_tsp' with (encryption = true\u00ef\u00bc\u008c enckey = '12345678ab');", "tblspace_tsp1": "CREATE TABLESPACE tblspace_tsp1 LOCATION '/data/tblspace' WITH (ONLINE_MODE=TRUE);", "zhparsercfg": "CREATE TEXT SEARCH CONFIGURATION zhparsercfg (PARSER = zhparser);", "my_russian": "CREATE TEXT SEARCH DICTIONARY my_russian ( template = snowball, language = russian, stopwords = myrussian );", "jieba": "CREATE TEXT SEARCH PARSER jieba ( START = jieba_start, GETTOKEN = jieba_gettoken, END = jieba_end, LEXTYPES = jieba_lextype, HEADLINE = prsd_headline );", "intdict_template1": "CREATE TEXT SEARCH TEMPLATE intdict_template1 ( LEXIZE = dintdict_lexize, INIT = dintdict_init );", "check_update": "CREATE TRIGGER check_update BEFORE UPDATE ON accounts FOR EACH ROW EXECUTE FUNCTION check_account_update();", "log_update": "CREATE TRIGGER log_update AFTER UPDATE ON accounts FOR EACH ROW WHEN (OLD.* IS DISTINCT FROM NEW.*) EXECUTE FUNCTION log_account_update();", "view_insert": "CREATE TRIGGER view_insert INSTEAD OF INSERT ON my_view FOR EACH ROW EXECUTE FUNCTION view_insert_row();", "transfer_insert": "CREATE TRIGGER transfer_insert AFTER INSERT ON transfer REFERENCING NEW TABLE AS inserted FOR EACH STATEMENT EXECUTE FUNCTION check_transfer_balances_to_zero();", "paired_items_update": "CREATE TRIGGER paired_items_update AFTER UPDATE ON paired_items REFERENCING NEW TABLE AS newtab OLD TABLE AS oldtab FOR EACH ROW EXECUTE FUNCTION check_matching_pairs();", "compfoo": "CREATE TYPE compfoo AS (f1 int, f2 text); CREATE FUNCTION getfoo() RETURNS SETOF compfoo AS $$ SELECT fooid, fooname FROM foo $$ LANGUAGE SQL;", "bug_status": "CREATE TYPE bug_status AS ENUM ('new', 'open', 'closed'); CREATE TABLE bug ( id serial, description text, status bug_status );", "float8_range": "CREATE TYPE float8_range AS RANGE (subtype = float8, subtype_diff = float8mi);", "rainbow": "CREATE TYPE rainbow AS SET ('R', 'O', 'Y', 'G', 'B', 'P'); CREATE TABLE colors (col rainbow)", "int_table": "CREATE TYPE int_table AS TABLE OF INT NOT NULL;", "int_varray": "CREATE TYPE int_varray AS VARRAY(10) OF INT;", "box": "CREATE TYPE box ( INTERNALLENGTH = 16, INPUT = my_box_in_function, OUTPUT = my_box_out_function, ELEMENT = float4 );", "bigobj": "CREATE TYPE bigobj ( INPUT = lo_filein, OUTPUT = lo_fileout, INTERNALLENGTH = VARIABLE ); CREATE TABLE big_objs ( id integer, obj bigobj );", "tb1": "CREATE TABLE tb1(i objtype); INSERT INTO tb1 VALUES(objtype()); SELECT * FROM tb1; SELECT t.i.memfunc(1) FROM tb1 t;", "FOR": "CREATE USER MAPPING FOR bob SERVER foo OPTIONS (user 'bob', password 'secret');", "comedies": "CREATE VIEW comedies AS SELECT * FROM films WHERE kind = 'Comedy';", "universal_comedies": "CREATE VIEW universal_comedies AS SELECT * FROM comedies WHERE classification = 'U' WITH LOCAL CHECK OPTION;", "sys_comedies": "CREATE VIEW sys_comedies AS SELECT * FROM comedies WHERE classification = 'PG' WITH CASCADED CHECK OPTION;", "vista": "CREATE VIEW vista AS SELECT 'Hello World';", "a": "DECLARE liahona CURSOR FOR SELECT * FROM films;", "Q1_2021_sales": "CREATE VIEW Q1_2021_sales ASSELECT * FROM sales PARTITION (SALES_Q1_2021);", "cust_addr_typ": "CREATE TYPE cust_addr_typ AS OBJECT ( street_address VARCHAR2(40), postal_code VARCHAR2(10), city VARCHAR2(30), state_province VARCHAR2(10), country_id CHAR(2) );", "t_rownum": "CREATE TABLE t_rownum(c INT); INSERT INTO t_rownum VALUES(0); INSERT INTO t_rownum VALUES(0); INSERT INTO t_rownum VALUES(0); UPDATE t_rownum SET c = ROWNUM; SELECT * FROM t_rownum;", "address_book_t": "CREATE TYPE address_book_t AS TABLE OF cust_address_typ; DECLARE myaddr cust_address_typ := cust_address_typ('500 KingbaseES Parkway', 94065, 'Redwood Shores', 'CA','USA'); alladdr address_book_t := address_book_t(); BEGIN INSERT INTO customers VALUES (666999, 'Joe', 'Smith', myaddr, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL); END;", "warehouse_tab": "CREATE TABLE warehouse_tab OF warehouse_typ; INSERT INTO warehouse_tab VALUES (warehouse_typ(101, 'new_wh', 201)); CREATE TYPE facility_typ AS OBJECT ( facility_id NUMBER, warehouse_ref REF warehouse_typ); CREATE TABLE buildings (b_id NUMBER, building facility_typ); INSERT INTO buildings VALUES (10, facility_typ(102, (SELECT REF(w) FROM warehouse_tab w WHERE warehouse_name = 'new_wh'))); SELECT b.b_id, b.building.facility_id \"FAC_ID\", DEREF(b.building.warehouse_ref) \"WH\" FROM buildings b;", "ducks": "CREATE TABLE ducks (f CHAR(6), v VARCHAR2(6)); INSERT INTO ducks VALUES ('DUCK', 'DUCK'); SELECT '*'||f||'*' \"char\", '*'||v||'*' \"varchar\" FROM ducks;", "t": "CREATE TABLE t (col1 VARCHAR2(100));", "j_purchaseorder": "CREATE TABLE j_purchaseorder (id RAW NOT NULL, date_loaded TIMESTAMP(6) WITH TIME ZONE, po_document CLOB CONSTRAINT ensure_json CHECK (po_document IS JSON));", "tinyint_fun": "CREATE TABLE tinyint_fun(a tinyint); INSERT INTO tinyint_fun values('55'); INSERT INTO tinyint_fun values('100'); SELECT bit_and(a) from tinyint_fun;", "comment_test": "CREATE TABLE comment_test ( id int, positive_col int CHECK (positive_col > 0), indexed_col int, CONSTRAINT comment_test_pk PRIMARY KEY (id)); COMMENT ON COLUMN comment_test.id IS 'Column ''id'' on comment_test'; SELECT col_description('comment_test'::regclass, 1) as comment;", "aggtest": "CREATE TABLE aggtest ( a int2, b float4 ); SELECT corr(b, a) FROM aggtest;", "testseq": "CREATE TEMP SEQUENCE testseq; SELECT nextval('testseq'); SELECT currval('testseq'); SELECT nextval('testseq'); SELECT currval('testseq');", "xmltbl": "CREATE TABLE xmltbl (a int, b text); INSERT INTO xmltbl VALUES (1, 'one'), (2, 'two'), (-1, null); DECLARE xc CURSOR WITH HOLD FOR SELECT * FROM xmltbl ORDER BY 1, 2; SELECT cursor_to_xml('xc'::refcursor, 5, false, true, '');", "employees": "CREATE TABLE employees ( employee_id numeric(6) , first_name varchar(20) , last_name varchar(25) , email varchar(25) , phone_number varchar(20) , hire_date date , job_id varchar2(10) , salary numeric(8,2) , commission_pct numeric(2,2) , manager_id numeric(6) , department_id numeric(4) ) ;", "datetimes": "CREATE TEMP TABLE datetimes( id int, f_time time, f_timetz timetz, f_interval interval, f_timestamptz timestamptz, f_timestamp timestamp ); INSERT INTO datetimes VALUES (1, '11:00', '11:00 BST', '1 year', '2000-10-19 10:23:54+01', '2000-10-19 10:23:54'), (2, '12:00', '12:00 BST', '2 years', '2001-10-19 10:23:54+01', '2001-10-19 10:23:54'), (3, '13:00', '13:00 BST', '3 years', '2001-10-19 10:23:54+01', '2001-10-19 10:23:54'), (4, '14:00', '14:00 BST', '4 years', '2002-10-19 10:23:54+01', '2002-10-19 10:23:54'), (5, '15:00', '15:00 BST', '5 years', '2003-10-19 10:23:54+01', '2003-10-19 10:23:54'), (6, '15:00', '15:00 BST', '5 years', '2004-10-19 10:23:54+01', '2004-10-19 10:23:54'), (7, '17:00', '17:00 BST', '7 years', '2005-10-19 10:23:54+01', '2005-10-19 10:23:54'), (8, '18:00', '18:00 BST', '8 years', '2006-10-19 10:23:54+01', '2006-10-19 10:23:54'), (9, '19:00', '19:00 BST', '9 years', '2007-10-19 10:23:54+01', '2007-10-19 10:23:54'), (10, '20:00', '20:00 BST', '10 years', '2008-10-19 10:23:54+01', '2008-10-19 10:23:54'); SELECT id, f_time, first_value(id) OVER w FROM datetimes WINDOW w AS (ORDER BY f_time RANGE BETWEEN '70 min'::interval preceding AND '2 hours'::interval following);", "unnest2": "CREATE OR REPLACE FUNCTION unnest2(anyarray) RETURNS SETOF anyelement AS $$ select $1[i][j] from generate_subscripts($1,1) g1(i), generate_subscripts($1,2) g2(j); $$ LANGUAGE sql IMMUTABLE; CREATE FUNCTION SELECT * FROM unnest2(ARRAY[[1,2],[3,4]]);", "group_concat_test": "CREATE TABLE group_concat_test(a int, b int ,c int PRIMARY KEY); INSERT INTO group_concat_test VALUES(1,1,3); INSERT INTO group_concat_test VALUES(2,3,2); INSERT INTO group_concat_test VALUES(3,2,1); INSERT INTO group_concat_test VALUES(1,2,0); INSERT INTO group_concat_test VALUES(NULL,2,6); CREATE EXTENSION kdb_utils_function; SELECT group_concat(a) FROM group_concat_test; SELECT group_concat(distinct a) FROM group_concat_test; SELECT group_concat(b order by b desc) FROM group_concat_test; SELECT group_concat(a order by b,c) FROM t1;", "tbl": "CREATE TABLE tbl(); SELECT has_any_column_privilege('tbl', 'INSERT, UPDATE, REFERENCES');", "x_seq": "CREATE SEQUENCE x_seq; SELECT has_sequence_privilege('x_seq', 'SELECT');", "mytsp": "CREATE TABLESPACE mytsp LOCATION '/path/to/mytsp'; SELECT has_tablespace_privilege('mytsp', 'CREATE');", "idxgin": "CREATE INDEX idxgin ON api USING gin (jdoc);", "foo": "CREATE TEMP TABLE foo (serial_num int, name text, type text); INSERT INTO foo VALUES (847001,'t15','GE1043'); INSERT INTO foo VALUES (847002,'t16','GE1043'); INSERT INTO foo VALUES (847003,'sub-alpha','GESS90'); SELECT json_object_agg(name, type) FROM foo;", "idxginp": "CREATE INDEX idxginp ON api USING gin (jdoc jsonb_path_ops);", "idxgintags": "CREATE INDEX idxgintags ON api USING gin ((jdoc -> 'tags'));", "reservation": "CREATE TABLE reservation (room int, during tsrange); INSERT INTO reservation VALUES (1108, '[2010-01-01 14:30, 2010-01-01 15:30)'); SELECT int4range(10, 20) @> 3; SELECT numrange(11.1, 22.2) && numrange(20.0, 30.0); SELECT upper(int8range(15, 25)); SELECT int4range(10, 20) * int4range(15, 25); SELECT isempty(numrange(1, 5));", "floatrange": "CREATE TYPE floatrange AS RANGE ( subtype = float8, subtype_diff = float8mi ); SELECT '[1.234, 5.678]'::floatrange;", "time_subtype_diff": "CREATE FUNCTION time_subtype_diff(x time, y time) RETURNS float8 AS 'SELECT EXTRACT(EPOCH FROM (x - y))' LANGUAGE sql STRICT IMMUTABLE; CREATE TYPE timerange AS RANGE ( subtype = time, subtype_diff = time_subtype_diff ); SELECT '[11:10, 23:00]'::timerange;", "reservation_idx": "CREATE INDEX reservation_idx ON reservation USING GIST (during);", "ranks": "CREATE TABLE ranks( c VARCHAR(10)); INSERT INTO ranks(c) VALUES ('A'),('B'),('C'),('B'),('E'); SELECT c, RANK() OVER(ORDER BY c) RANK_NUM FROM ranks;", "btree_gist": "CREATE EXTENSION btree_gist; CREATE TABLE room_reservation ( room text, during tsrange, EXCLUDE USING GIST (room WITH =, during WITH &&) ); INSERT INTO room_reservation VALUES ('123A', '[2010-01-01 14:00, 2010-01-01 15:00)'); INSERT 0 1 INSERT INTO room_reservation VALUES ('123A', '[2010-01-01 14:30, 2010-01-01 15:30)'); ERROR: conflicting key value violates exclusion constraint \" room_reservation_room_during_excl\" DETAIL: Key (room, during)=(123A, [\"2010-01-01 14:30:00\",\"2010-01-01 15:30:00\")) conflicts with existing key (room, during)=(123A, [\"2010-01-01 14:00:00\",\"2010-01-01 15:00:00\")). INSERT INTO room_reservation VALUES ('123B', '[2010-01-01 14:30, 2010-01-01 15:30)'); INSERT 0 1", "posint": "CREATE DOMAIN posint AS integer CHECK (VALUE > 0); CREATE TABLE mytable (id posint); INSERT INTO mytable VALUES(1);", "mood": "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');", "happiness": "CREATE TYPE happiness AS ENUM ('happy', 'very happy', 'ecstatic'); CREATE TABLE holidays ( num_weeks integer, happiness happiness ); INSERT INTO holidays(num_weeks,happiness) VALUES (4, 'happy'); INSERT INTO holidays(num_weeks,happiness) VALUES (6, 'very happy'); INSERT INTO holidays(num_weeks,happiness) VALUES (8, 'ecstatic'); INSERT INTO holidays(num_weeks,happiness) VALUES (2, 'sad'); ERROR: invalid input value for enum happiness: \"sad\" SELECT person.name, holidays.num_weeks FROM person, holidays WHERE person.current_mood = holidays.happiness; ERROR: operator does not exist: mood = happiness", "empl_temp": "CREATE TABLE empl_temp (employee_id NUMBER(6), first_name VARCHAR(20), last_name VARCHAR(25), email VARCHAR(25), hire_date DATE DEFAULT SYSDATE, job_id VARCHAR(10), clob_column CLOB ); INSERT INTO empl_temp VALUES(111,'John','Doe','example.com','10-JAN-2015','1001','ExperiencedEmployee'); INSERT INTO empl_temp VALUES(112,'John','Smith','example.com','12-JAN-2015','1002','JuniorEmployee'); INSERT INTO empl_temp VALUES(113,'Johnnie','Smith','example.com','12-JAN-2014','1002','Mid-CareerEmployee'); INSERT INTO empl_temp VALUES(115,'Jane','Doe','example.com','15-JAN-2015','1005','ExecutiveEmployee');", "date_tab": "CREATE TABLE date_tab ( ts_col TIMESTAMP, tsltz_col TIMESTAMP WITH LOCAL TIME ZONE, tstz_col TIMESTAMP WITH TIME ZONE);", "person_t": "CREATE TYPE person_t AS OBJECT (name varchar2(100), ssn number); CREATE TABLE persons OF person_t; INSERT INTO persons VALUES (person_t('Bob', 1234)); INSERT INTO persons VALUES (person_t('Joe', 2345)); INSERT INTO persons VALUES (person_t('Tom', 5678)); SELECT value(t) FROM persons t;", "kdb_utils_function": "CREATE EXTENSION kdb_utils_function; CREATE TABLE wm_concat_test (id integer, name text, age integer, address text, salary numeric, b bytea); INSERT INTO wm_concat_test VALUES(1, 'Paul', 32, 'California', 20000, '12345'), (2, 'Allen', 25, 'Texas', 15000, '2345'), (3, 'Teddy', 23, 'Norway', 20000, '3456'), (3, 'Mark', 25, 'Rich-Mond', 65000, '4567'), (5, 'David', 27, 'Texas', 85000, '5678'), (2, 'Kim', 22, 'South-Hall', 45000, '6789'),(7, 'James', 24, 'Houston', 10000, '7890'), (0, 'aaa', 123, 'bbb', 2222, '0998'), (1, 'baa', 123, 'bbb', 2222, '0998'); SELECT wm_concat(name) from wm_concat_test; SELECT wm_concat(name) FROM wm_concat_test GROUP BY id;", "NestedTable_Int": "CREATE TYPE NestedTable_Int AS TABLE OF INT;", "Nested_Table_Int": "CREATE TYPE Nested_Table_Int AS TABLE OF INT; \\set SQLTERM / DO $$DECLARE a Nested_Table_Int; BEGIN a = Nested_Table_Int(1, 2, 3); END$$; / CREATE Function test_nestedtable1() return Nested_Table_Int AS result Nested_Table_Int = Nested_Table_Int(1, 2, 5); BEGIN return result; end; / Create PROCEDURE test_nestedtable2(nest_int Nested_Table_Int) AS DECLARE i INT; BEGIN i := nest_int.first(); WHILE i IS NOT NULL LOOP RAISE NOTICE 'nest_int(%) is %', i, nest_int(i); i := nest_int.next(i); END LOOP; END; / call test_nestedtable2(test_nestedtable1()); / \\set SQLTERM ;", "tab_xml": "CREATE TABLE tab_xml (a int, b xml); INSERT INTO tab_xml VALUES (1, '<a><b>1</b><b>2</b></a>'); INSERT INTO tab_xml VALUES (2, xml ('<a><b>3</b><c>4</c></a>')); SELECT t.* FROM tab_xml, table(xmlsequence(extract(b, '/a/*'))) AS t;", "Varray_Int": "CREATE TYPE Varray_Int AS VARRAY(50) OF INT;", "complex": "CREATE TYPE complex AS ( r double precision, i double precision ); CREATE TYPE inventory_item AS ( name text, supplier_id integer, price numeric );", "emp": "CREATE TABLE emp (ename varchar(20), empno int, mgr int); INSERT INTO emp (ename,empno,mgr) values ('KING',7839,NULL),('JONES',7566,7839),('SCOTT',7788,7566),('ADAMS',7876,7788),('FORD',7902,7566)\u00ef\u00bc\u008c ('SMITH',7369,7902),('ANDERSON',8142,7902),('BLAKE',7698,7839),('ALLEN',7499,7698),('WARD',7521,7698),('MARTIN',7654,7698),('TURNER',7844,7698), ('JAMES',7900,7698),('CLARK',7782,7839),('MILLER',7934,7782); SELECT ename, empno, mgr FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr;", "student_ind1": "CREATE INDEX student_ind1 ON student(sno); CREATE INDEX EXPLAIN SELECT * FROM student, score WHERE student.sno = score.sno AND student.sno = 201;", "on_hand": "CREATE TABLE on_hand ( item inventory_item, count integer ); INSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);", "price_extension": "CREATE FUNCTION price_extension(inventory_item, integer) RETURNS numeric AS 'SELECT $1.price * $2' LANGUAGE SQL; SELECT price_extension(item, 10) FROM on_hand;", "inventory_item": "CREATE TABLE inventory_item ( name text, supplier_id integer REFERENCES suppliers, price numeric CHECK (price > 0) );", "coord_idx": "CREATE INDEX coord_idx ON measured (x, y, (z + t)); ALTER INDEX coord_idx ALTER COLUMN 3 SET STATISTICS 1000;", "base_table": "CREATE TABLE base_table (id int, ts timestamptz); CREATE VIEW a_view AS SELECT * FROM base_table; ALTER VIEW a_view ALTER COLUMN ts SET DEFAULT now(); INSERT INTO base_table(id) VALUES(1);", "people": "CREATE TABLE people (id int, name text); CREATE VIEW teacher AS SELECT * FROM people; SELECT * FROM teacher; ALTER TABLE people DROP name; ALTER VIEW teacher COMPILE; ALTER TABLE PEOPLE ADD COLUMN (name text); ALTER VIEW teacher COMPILE;"}